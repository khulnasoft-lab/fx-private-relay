# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER    - login info for docker hub
# DOCKER_PASS
# COVERALLS_REPO_TOKEN - used by coveralls-python
# HEROKU_APP_NAME - Name on Heroku
# HEROKU_API_KEY - API key from service account
#
version: 2.1
orbs:
  # https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@5.1.0
  # https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@2.1.1
  # https://circleci.com/developer/orbs/orb/circleci/heroku
  heroku: circleci/heroku@1.2.6
commands:
  checkout_with_submodules:
    description: Checkout Relay code and submodules
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
executors:
  # Using executors so most of the version information is here
  # CircleCI Documentation:
  # https://circleci.com/docs/reusing-config/#authoring-reusable-executors
  # https://circleci.com/docs/configuration-reference/#executors
  # https://circleci.com/docs/configuration-reference/#docker
  # https://circleci.com/docs/circleci-images/
  # https://circleci.com/docs/introduction-to-yaml-configurations/#anchors-and-aliases
  docker:
    docker: &default_with_auth
      # https://hub.docker.com/_/docker
      - image: docker:<<parameters.docker-version>><<parameters.variant>>
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    parameters:
      docker-version:
        description: "version tag"
        default: "stable"
        type: string
      variant:
        description: "version tag"
        default: ""
        type: enum
        # Partial list of variants, see https://hub.docker.com/_/docker
        # Note: "-ce" is a retired variant "Community Edition" for the 18.02 series
        enum: ["", "-git", "-ce"]
  node:
    # https://circleci.com/developer/images/image/cimg/node
    docker:
      - <<: *default_with_auth
        image: cimg/node:<<parameters.node-version>>
    parameters:
      node-version:
        description: "version tag"
        default: "18.18"
        type: string
  python:
    # https://circleci.com/developer/images/image/cimg/python
    docker:
      - <<: *default_with_auth
        image: cimg/python:<<parameters.python-version>><<parameters.variant>>
    parameters: &python_parameters
      python-version:
        description: "version tag"
        default: "3.10.13"
        type: string
      variant:
        description: "image variant"
        default: ""
        type: enum
        enum: ["", "-node", "-browsers"]
  python-with-postgres:
    # https://circleci.com/developer/images/image/cimg/python
    # https://circleci.com/developer/images/image/cimg/postgres
    docker:
      - <<: *default_with_auth
        image: cimg/python:<<parameters.python-version>><<parameters.variant>>
      - <<: *default_with_auth
        image: cimg/postgres:<<parameters.postgres-version>>
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 6edef2d746f2274cab951a452d5fc13d
          POSTGRES_DB: circle
    parameters:
      <<: *python_parameters
      postgres-version:
        description: "version tag"
        default: "14.7"
        type: string
  ruby:
    # https://circleci.com/developer/images/image/cimg/ruby
    docker:
      - <<: *default_with_auth
        image: cimg/ruby:<<parameters.ruby-version>>
    parameters:
      ruby-version:
        description: "version tag"
        default: "2.7.2"
        type: string
jobs:
  build_frontend:
    executor: node
    steps:
      - checkout_with_submodules
      - node/install:
          node-version: '18'
      - node/install-packages:
        override-ci-command: npm ci --workspace frontend
      - run:
          name: Build Code
          command: npm run build --workspace frontend
      - save_cache:
          key: v1-frontend-build-{{ .Branch }}-{{ .Revision }}
          paths:
            - ./frontend/out/

  test_frontend:
    executor: node
    steps:
      - checkout
      - node/install:
          node-version: '18'
      - node/install-packages:
        override-ci-command: npm ci --workspace frontend
      - run:
          name: Check licences of frontend dependencies
          command: npm run licensecheck --workspace frontend
      - run:
          name: Lint Code
          command: npm run lint --workspace frontend -- --max-warnings=0
      - run:
          name: Test Code
          command: |
            mkdir --parents /tmp/workspace/test-results/frontend-coverage
            npm test --workspace frontend -- \
              --ci \
              --runInBand \
              --coverageDirectory=/tmp/workspace/test-results/frontend-coverage
      - store_test_results:
          path: frontend/junit.xml
      - store_artifacts:
          path: /tmp/workspace/test-results/frontend-coverage
          destination: frontend_test_coverage
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - test-results/frontend-coverage

  convert_frontend_coverage:
    executor: ruby
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run: gem install coveralls-lcov
      - run:
          name: Add frontend prefix to lcov.info
          command: |
            sed 's|^SF:|SF:frontend/|' \
              /tmp/workspace/test-results/frontend-coverage/lcov.info \
              > /tmp/workspace/test-results/frontend-coverage/lcov-prefixed.info
      - run:
          name: Generate coveralls.json report
          command: |
            coveralls-lcov \
              --verbose --dry-run \
              /tmp/workspace/test-results/frontend-coverage/lcov-prefixed.info \
              > /tmp/workspace/test-results/frontend-coverage/coveralls.json
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - test-results/frontend-coverage/lcov-prefixed.info
            - test-results/frontend-coverage/coveralls.json

  build_test_backend:
    executor:
      name: docker
      variant: "-git"
    working_directory: /dockerflow
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout_with_submodules
      - setup_remote_docker:
          # Use a version of Docker that works with Node, see
          # https://support.circleci.com/hc/en-us/articles/360050934711-Docker-build-fails-with-EPERM-operation-not-permitted-copyfile-when-using-node-14-9-0-or-later-
          # (apparently version 17.09.0-ce is lower than 1.9.1, but 19.03.13 is not?)
          # and
          # https://github.com/nodejs/docker-node#supported-docker-versions
          # and
          # https://circleci.com/docs/2.0/building-docker-images/#docker-version
          version: 20.10.11
          docker_layer_caching: True
      - restore_cache:
          key: v1-frontend-build-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Copy build artefacts from build_frontend into this folder
          command: mv /home/circleci/project/frontend/out /dockerflow/frontend/

      - run:
          name: Copy email tracker lists into this folder
          command: |
            cp /tmp/workspace/email-trackers/level-one-trackers.json /dockerflow/emails/tracker_lists/
            cp /tmp/workspace/email-trackers/level-two-trackers.json /dockerflow/emails/tracker_lists/

      - run:
          name: Create a version.json
          command: |
            # create a version.json per https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json

      - run:
          name: Build Docker image
          command: |
            docker build --tag fx-private-relay \
            --build-arg CIRCLE_BRANCH="$CIRCLE_BRANCH" \
            --build-arg CIRCLE_TAG="$CIRCLE_TAG" \
            --build-arg CIRCLE_SHA1="$CIRCLE_SHA1" \
            .

      - run:
          name: Test Code
          command: |
            # Create a volume owned by the app user
            docker run \
              --volume /tmp/workspace \
              --name workspace-test-results \
              alpine \
              /bin/sh -c \
                "chmod 0777 /tmp/workspace && \
                 chown 10001:10001 /tmp/workspace"

            # Run coverage tests, outputting the results in XML format, capture exit code
            set +e
            docker run \
              --entrypoint "/bin/bash" \
              --volumes-from workspace-test-results \
              -e PHONES_ENABLED=$PHONES_ENABLED \
              fx-private-relay \
              -c \
                'mkdir --parents /tmp/workspace/test-results/pytest && \
                 mkdir --parents /tmp/workspace/test-results/backend-coverage && \
                 /app/.local/bin/pytest \
                   --cov=. \
                   --cov-config=.coveragerc \
                   --cov-report=term-missing \
                   --cov-report=xml \
                   --cov-fail-under=60 \
                   --cov-branch \
                   --junitxml=/tmp/workspace/test-results/pytest/results.xml ; \
                 STATUS=$?
                 mv coverage.xml /tmp/workspace/test-results/backend-coverage/results.xml ; \
                 mv .coverage /tmp/workspace/test-results/backend-coverage/.coverage; \
                 exit $STATUS'
            TEST_STATUS=$?
            set -e

            # Copy results to local disk
            mkdir --parents /tmp/workspace/
            docker cp workspace-test-results:/tmp/workspace/test-results /tmp/workspace

            # Exit with test error code
            exit $TEST_STATUS

      - store_test_results:
          path: /tmp/workspace/test-results/pytest

      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - test-results/pytest
            - test-results/backend-coverage

      - run:
          name: Check if deploying
          command: |
            if [ "${CIRCLE_BRANCH}" != "main" ] && [ -z "${CIRCLE_TAG}" ]; then
              echo "Skipping exporting Docker image, not main branch or tag."
              circleci step halt
            fi
            # https://stackoverflow.com/a/18558871/10612
            if case $CIRCLE_TAG in addon-*) ;; *) false;; esac; then
              echo "Skipping exporting Docker image, ${CIRCLE_TAG} has addon- prefix."
              circleci step halt
            fi

      # save the built docker container into CircleCI's cache. This is
      # required since Workflows do not have the same remote docker instance.
      - run:
          name: docker save fx-private-relay
          command: |
            mkdir --parents /tmp/workspace;
            docker save --output /tmp/workspace/docker.tar "fx-private-relay"
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - docker.tar

  upload_coverage:
    executor:
      name: python
      variant: "-node"
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Upload coverage
          command: |
            pip install coveralls
            cp /tmp/workspace/test-results/backend-coverage/.coverage .
            coveralls --merge=/tmp/workspace/test-results/frontend-coverage/coveralls.json

  deploy:
    executor:
      name: docker
      # TODO: Try to update this. Published Feb 2018.
      docker-version: "18.02.0"
      variant: "-ce"
    steps:
      - setup_remote_docker:
          docker_layer_caching: True
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Restore Docker image cache
          command: docker load --input /tmp/workspace/docker.tar

      - run:
          name: Deploy to Dockerhub
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            # deploy master
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              docker tag fx-private-relay ${DOCKERHUB_REPO}:latest
              docker push ${DOCKERHUB_REPO}:latest
            elif  [ ! -z "${CIRCLE_TAG}" ]; then
            # deploy a release tag...
              echo "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker tag fx-private-relay "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker images
              docker push "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
            fi

  heroku_deploy:
    executor: heroku/default
    steps:
      - checkout
      - heroku/install
      - heroku/deploy-via-git

  python_job:
    executor:
      name: << parameters.executor >>
    parameters:
      executor:
        description: "Which executor to use?"
        default: "python"
        type: enum
        enum: ["python", "python-with-postgres"]
      command:
        description: "What command should the job run?"
        default: "pytest"
        type: enum
        enum: ["pytest", "black", "mypy", "build email tracker lists"]
      test_results_filename:
        description: "What is the name of the jUnit XML test output? (Optional)"
        default: ""
        type: string
      pytest_fail_fast:
        description: "pytest will stop after 3 failures"
        type: boolean
        default: false
      pytest_phones_backend:
        description: "Enable phones with Twilio or Inteliquent"
        default: "twilio"
        type: enum
        enum: ["no-phones", "twilio", "iq"]
      update_dependency:
        description: "Update a dependency before running the command (Optional)"
        default: ""
        type: string
      mypy_strict:
        description: "mypy will use --strict"
        type: boolean
        default: false
      allow_fail:
        description: "Allow the command to fail without failing job."
        type: boolean
        default: false
      production_with_new_migrations:
        description: "Test if deployed code will work with new migrations."
        type: boolean
        default: false
    steps:
      - checkout_with_submodules
      - python/install-packages:
          pkg-manager: pip
      - unless:
          condition:
            equal: ["", << parameters.test_results_filename >>]
          steps:
            - run:
                name: Create job-results directory
                command: mkdir job-results
      - run:
          name: Set test defaults
          command: |
            cp .env-dist .env
            touch .python_job.bash
      - run:
          name: Create empty staticfiles directories
          command: |
            mkdir -p staticfiles
            mkdir -p frontend/out
      - when:
          condition: << parameters.production_with_new_migrations >>
          steps:
            - run:
                name: Get production tag
                command: |
                  PROD_TAG=$(curl --silent https://relay.firefox.com/__version__ | jq -r ".version")
                  echo "export PROD_TAG='${PROD_TAG}'" >> .python_job.bash
      - when:
          condition:
            equal: ["black", << parameters.command >>]
          steps:
            - run:
                name: Setup black command
                command: |
                  THE_COMMAND="black --check ."
                  echo "export THE_COMMAND='${THE_COMMAND}'" >> .python_job.bash
      - when:
          condition:
            equal: ["mypy", << parameters.command >>]
          steps:
            - run:
                name: Setup mypy command
                command: |
                  if [[ "<<# parameters.mypy_strict >>1<</ parameters.mypy_strict >>" == "1" ]]
                  then
                    MYPY_STRICT=" --strict"
                  else
                    MYPY_STRICT=""
                  fi
                  echo "export MYPY_STRICT='${MYPY_STRICT}'" >> .python_job.bash

                  if [[ "<< parameters.test_results_filename >>" != "" ]]
                  then
                    MYPY_JUNIT_XML=' --junit-xml job-results/<< parameters.test_results_filename >>'
                  else
                    MYPY_JUNIT_XML=""
                  fi
                  echo "export MYPY_JUNIT_XML='${MYPY_JUNIT_XML}'" >> .python_job.bash

                  THE_COMMAND="mypy --no-incremental${MYPY_STRICT}${MYPY_JUNIT_XML} ."
                  echo "export THE_COMMAND='${THE_COMMAND}'" >> .python_job.bash
      - when:
          condition:
            equal: ["pytest", << parameters.command >>]
          steps:
            - run:
                name: Setup pytest command
                command: |
                  if [ "twilio" == "<< parameters.pytest_phones_backend >>" ]
                  then
                    PHONES_ENABLED=1
                    IQ_ENABLED=0
                  elif [ "iq" == "<< parameters.pytest_phones_backend >>" ]
                  then
                    PHONES_ENABLED=1
                    IQ_ENABLED=1
                  else
                    PHONES_ENABLED=0
                    IQ_ENABLED=0
                  fi
                  echo "export PHONES_ENABLED=${PHONES_ENABLED}" >> .python_job.bash
                  echo "export IQ_ENABLED=${IQ_ENABLED}" >> .python_job.bash
                  # Also into .env
                  echo "PHONES_ENABLED=${PHONES_ENABLED}" >> .env
                  echo "IQ_ENABLED=${IQ_ENABLED}" >> .env

                  if [[ "<<# parameters.pytest_fail_fast >>1<</ parameters.pytest_fail_fast >>" == "1" ]]
                  then
                    PYTEST_FAIL_FAST=" --maxfail=3"
                  else
                    PYTEST_FAIL_FAST=""
                  fi
                  echo "export PYTEST_FAIL_FAST='${PYTEST_FAIL_FAST}'" >> .python_job.bash

                  if [[ "<< parameters.test_results_filename >>" != "" ]]
                  then
                    PYTEST_JUNIT_XML=' --junit-xml=job-results/<< parameters.test_results_filename >>'
                  else
                    PYTEST_JUNIT_XML=""
                  fi
                  echo "export PYTEST_JUNIT_XML='${PYTEST_JUNIT_XML}'" >> .python_job.bash

                  THE_COMMAND="pytest${PYTEST_FAIL_FAST}${PYTEST_JUNIT_XML} ."
                  echo "export THE_COMMAND='${THE_COMMAND}'" >> .python_job.bash
      - when:
          condition:
            equal: ["build email tracker lists", << parameters.command >>]
          steps:
            - run:
                name: Setup build email tracker list command
                command: |
                  echo "Creating build_email_tracker_list.sh with these commands:"
                  echo

                  cat \<<'EOF' | tee build_email_tracker_list.sh
                  set -x
                  ./manage.py migrate --skip-checks
                  echo
                  ./manage.py get_latest_email_tracker_lists
                  ./manage.py get_latest_email_tracker_lists --tracker-level=2
                  mkdir --parents /tmp/workspace/email-trackers
                  cp /home/circleci/project/emails/tracker_lists/level-one-trackers.json /tmp/workspace/email-trackers/
                  cp /home/circleci/project/emails/tracker_lists/level-two-trackers.json /tmp/workspace/email-trackers/
                  EOF

                  THE_COMMAND="bash build_email_tracker_list.sh"
                  echo "export THE_COMMAND='${THE_COMMAND}'" >> .python_job.bash
      - when:
          condition:
            equal: ["python-with-postgres", << parameters.executor >>]
          steps:
            - run:
                name: Install dockerize
                command: |
                  wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &&
                  sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &&
                  rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
                environment:
                  DOCKERIZE_VERSION: v0.6.1
            - run:
                name: Wait for the database
                command: dockerize -wait tcp://localhost:5432 -timeout 1m
            - run:
                name: Setup DATABASE_URL for postgres
                command: |
                  DATABASE_URL='postgresql://postgres:6edef2d746f2274cab951a452d5fc13d@localhost/circle'
                  echo "export DATABASE_URL='${DATABASE_URL}'" >> .python_job.bash
      - run:
          name: Setup shell environment
          command: |
            echo "python_job parameters:"
            cat .python_job.bash
            cat .python_job.bash >> $BASH_ENV
      - when:
          condition: << parameters.production_with_new_migrations >>
          steps:
            - run:
                name: Switch to production tag with branch's migrations
                command: |
                  echo "# Production tag is ${PROD_TAG}"
                  git fetch --force origin tag ${PROD_TAG}
                  git checkout ${PROD_TAG}
                  git submodule update --init --recursive
                  git checkout --theirs "${CIRCLE_SHA1}" -- '**/migrations/**'
                  git status
      - unless:
          condition:
            equal: [ "", << parameters.update_dependency >> ]
          steps:
            - run:
                name: "Update dependency << parameters.update_dependency >>"
                command: pip install --pre --upgrade "<< parameters.update_dependency >>"
      - unless:
          condition: << parameters.allow_fail >>
          steps:
            - run:
                name: Run << parameters.command >>
                command: |
                  echo "${THE_COMMAND}"
                  ${THE_COMMAND}
      - when:
          condition: << parameters.allow_fail >>
          steps:
            - run:
                name: Run << parameters.command >> (failure allowed)
                command: |
                  echo "${THE_COMMAND}"
                  set +x
                  ${THE_COMMAND} || echo "*** Command '${THE_COMMAND}' failed, but it is allowed to fail. ***"
      - unless:
          condition:
            equal: ["", << parameters.test_results_filename >>]
          steps:
            - store_test_results:
                path: job-results
      - when:
          condition:
            equal: ["build email tracker lists", << parameters.command >>]
          steps:
            - persist_to_workspace:
                root: /tmp/workspace
                paths:
                  - email-trackers/level-one-trackers.json
                  - email-trackers/level-two-trackers.json

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build_frontend: &default_filters
          filters:
            tags:
              only: /.*/

      - python_job:
          <<: *default_filters
          name: build email tracker lists
          command: "build email tracker lists"

      - build_test_backend:
          <<: *default_filters
          requires:
            - "build email tracker lists"
            - build_frontend

      - python_job:
          <<: *default_filters
          name: black style check
          command: black

      - python_job:
          <<: *default_filters
          name: mypy type check
          command: mypy
          test_results_filename: "mypy.xml"

      - python_job:
          <<: *default_filters
          name: mypy strict type check
          command: mypy
          test_results_filename: "mypy-strict.xml"
          mypy_strict: true
          allow_fail: true

      - python_job:
          <<: *default_filters
          name: pytest with postgres
          command: pytest
          executor: "python-with-postgres"
          test_results_filename: "pytest-postgres.xml"

      - python_job:
          <<: *default_filters
          name: sqlite migrations test
          command: pytest
          test_results_filename: "sqlite3-migrations.xml"
          pytest_fail_fast: true
          production_with_new_migrations: true

      - python_job:
          <<: *default_filters
          name: postgres migrations test
          command: pytest
          executor: "python-with-postgres"
          test_results_filename: "postgres-migrations.xml"
          pytest_fail_fast: true
          production_with_new_migrations: true

      - python_job:
          <<: *default_filters
          name: python test phones disabled
          command: pytest
          pytest_phones_backend: no-phones
          test_results_filename: pytest-phones-disabled.xml

      - python_job:
          <<: *default_filters
          name: django 4.2 test
          command: pytest
          pytest_fail_fast: true
          test_results_filename: pytest-django-4-2.xml
          update_dependency: "Django<5"
          allow_fail: true

      - python_job:
          <<: *default_filters
          name: python test iq enabled
          command: pytest
          pytest_phones_backend: iq
          test_results_filename: pytest-iq-enabled.xml

      - test_frontend:
          <<: *default_filters
          requires:
            - build_frontend

      - convert_frontend_coverage:
          <<: *default_filters
          requires:
            - test_frontend

      - upload_coverage:
          <<: *default_filters
          requires:
            - convert_frontend_coverage
            - build_test_backend

      - deploy:
          requires:
            - build_test_backend
          filters:
            tags:
              ignore: /addon-.*/
            branches:
              only: main

      - heroku_deploy:
          requires:
            - build_test_backend
          filters:
            branches:
              only: main
